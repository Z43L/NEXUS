name: NEXUS Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10]
        node-version: [16, 18]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=nexus --cov-report=xml --cov-report=html
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
  
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov=nexus --cov-append
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
    
    - name: Run security tests
      run: |
        pytest tests/security/ -v --cov=nexus --cov-append
  
  load-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Run load tests
      run: |
        pytest tests/load_test.py -v -m load --cov=nexus --cov-append
    
    - name: Run blockchain tests
      run: |
        forge test --match-contract ContractSecurityTest -v
  
  quality-gate:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, load-tests]
    
    steps:
    - name: Check quality gates
      run: |
        echo "Checking test coverage and quality metrics..."
        # Verificar cobertura mÃ­nima
        python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        coverage = float(root.attrib['line-rate'])
        print(f'Total coverage: {coverage:.2%}')
        assert coverage >= 0.85, f'Coverage {coverage:.2%} below minimum 85%'
        "
        
        # Verificar que todas las pruebas pasaron
        echo "All quality gates passed"